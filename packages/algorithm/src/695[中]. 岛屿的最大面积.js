/**
给你一个大小为 m x n 的二进制矩阵 grid 。

岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。
你可以假设 grid 的四个边缘都被 0（代表水）包围着。
岛屿的面积是岛上值为 1 的单元格的数目。
计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0。

输入：grid = [
  [0,0,1,0,0,0,0,0,0,0,0,0,0],
  [1,1,1,0,0,0,0,1,1,1,0,0,0],
  [1,0,1,0,1,0,0,0,1,1,0,0,0],
  [0,1,0,0,1,1,0,0,1,0,1,0,0],
  [0,1,0,0,1,1,0,0,0,1,1,0,0],
  [0,0,0,0,0,0,0,0,0,0,1,0,0],
  [0,0,0,0,0,0,0,1,1,1,0,0,0],
  [0,0,0,0,0,0,0,1,1,0,0,0,0]]

输出：6
``
输入：grid = [
[0,0,0,0,0,0,0,0]
]
输出：0
提示：
  m == grid.length
  n == grid[i].length
  1 <= m, n <= 50
  grid[i][j] 为 0 或 1
**/

const getIslandArea = (grid) => {
  let max = 0;
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid[i].length; j++) {
      if (grid[i][j] === 1) {
        // 判断哪一个是最大的，找出最大的
        max = Math.max(max, getArea(grid, i, j));
      }
    }
  }
  return max;
}

const getArea = (grid, i, j) => {
   // 当超出岛屿边界（上下左右）的时候，就直接退出，特别要加上当遍历到海洋的时候也要退出，
  if (i < 0 || j < 0 || i == grid.length || j == grid[i].length || grid[i][j] == 0) {
    return 0;
  }

  // 将陆地改为海洋，防止重复陆地重复遍历。
  grid[i][j] = 0;

  // 上下左右
  return getArea(grid, i - 1, j) + getArea(grid, i + 1, j) + getArea(grid, i, j - 1) + getArea(grid, i, j + 1) + 1;
}

const grid = [
  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
  [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
  [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]

console.log(getIslandArea(grid));
